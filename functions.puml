@startuml

class User {

    - Long id;
    - String email;
    - String password;
    - String firstName;
    - String lastName;
    - int ibanCode;
    - int bicCode;
    - double balance;
    - String friendsList;
    - Collection<Transfer> transfers;

    + Long getId()
    + void setId(Long id)
    + String getEmail()
    + void setEmail(String email)
    + String getPassword()
    + void setPassword(String password)
    + String getFirstName()
    + void setFirstName(String firstName)
    + String getLastName()
    + void setLastName(String lastName)
    + int getIbanCode()
    + void setIbanCode(int ibanCode)
    + int getBicCode()
    + void setBicCode(int bicCode)
    + double getBalance()
    + void setBalance(double balance)
    + String getFriendsList()
    + void setFriendsList(String friendsList)
    + Collection<Transfer> getTransfers()
    + void setTransfers(Collection<Transfer> transfers)
}

class Transfer {

    - Long id;
    - LocalDateTime date;
    - double amount;
    - double tax;
    - String description;
    - TransferType type;
    - User user;

    + Long getId()
    + void setId(Long id)
    + LocalDateTime getDate()
    + void setDate(LocalDateTime date)
    + double getAmount()
    + void setAmount(double amount)
    + double getTax()
    + void setTax(double tax)
    + String getDescription()
    + void setDescription(String description)
    + TransferType getType()
    + void setType(TransferType type)
    + User getUser()
    + void setUser(User user)
    + String toString()
}

class Tax {

    - Long id;
    - String name;
    - double rate;

    + Long getId()
    + void setId(Long id)
    + String getName()
    + void setName(String name)
    + double getRate()
    + void setRate(double rate)
    + String toString()
    + boolean equals(Object o)
}

interface UserRepository {

    + User findByEmail(String email)
}

interface TransferRepository {

    + Transfer findByUserId(Long userId)
}

interface TaxRepository {

    + Tax findByName(String name)
}

class UserService {

    - UserRepository userRepository;

    + User createUser(User user)
    + Collection<User> createUsers(Collection<User> users)
    + User readUserById(Long id)
    + User readUserByEmail(String email)
    + Collection<User> readUsers()
    + User updateUser(User user)
    + void deleteUserById(Long id)
    + void deleteUsers()
}

class UserController {

    - UserCreationService userCreationService;
    - UserReadService userReadService;
    - UserUpdateService userUpdateService;
    - UserDeletionService userDeletionService;
    - FormService formService;

    + User createUser(@RequestBody User user)
    + Collection<User> createUsers(@RequestBody Collection<User> users)
    + User readUserById(@PathVariable Long id)
    + User readUserByEmail(@RequestParam String email)
    + Collection<User> readUsers()
    + User updateUser(@RequestBody User user)
    + void getBalanceBack(@RequestParam double amount)
    + void getTopup(@RequestParam double amount)
    + void deleteUser(@PathVariable Long id)
    + void deleteUsers()
}

class TransferService {

    - TransferRepository transferRepository

    + Transfer createTransfer(Transfer transfer)
    + Collection<Transfer> createTransfers(Collection<Transfer> transfers)
    + Transfer readTransferById(Long id)
    + Collection<Transfer> readTransfers()
    + Transfer updateTransfer(Transfer transfer)
    + void deleteTransferById(Long id)
    + void deleteTransfers()
}

class TransferController {

    - TransferCreationService transferCreationService;
    - TransferReadService transferReadService;
    - TransferUpdateService transferUpdateService;
    - TransferDeletionService transferDeletionService;

    + Transfer createTransfer(@RequestBody Transfer transfer)
    + Collection<Transfer> createTransfers(@RequestBody Collection<Transfer> transfers)
    + Transfer readTransferById(@PathVariable Long id)
    + Collection<Transfer> readTransfers()
    + Transfer updateTransfer(@RequestBody Transfer transfer)
    + void deleteTransfer(@PathVariable Long id)
    + void deleteTransfers() 
}

class TaxService {

    - TaxRepository taxRepository;

    + Tax createTax(Tax tax)
    + Tax readTaxById(Long id)
    + Tax readTaxByName(String name)
    + Collection<Tax> readTaxes()
    + Collection<Tax> createTaxes(Collection<Tax> taxes)
    + Tax updateTax(Tax tax)
    + void deleteTaxById(Long id)
    + void deleteTaxes()
}

class TaxController {

    - TaxCreationService taxCreationService;
    - TaxReadService taxReadService;
    - TaxUpdateService taxUpdateService;
    - TaxDeletionService taxDeletionService;

    + Tax createTax(@RequestBody Tax tax)
    + Collection<Tax> createTax(@RequestBody Collection<Tax>  taxes)
    + Tax readTaxById(@PathVariable Long id)
    + Collection<Tax> readTaxes()
    + Tax updateTax(@RequestBody Tax tax)
    + void deleteTax(@PathVariable Long id)
    + void deleteTaxes()
}

User --|> UserService
UserService --> UserController
UserController --> UserRepository

Transfer --|> TransferService
TransferService --> TransferController
TransferController --> TransferRepository

Tax --|> TaxService
TaxService --> TaxController
TaxController --> TaxRepository

@enduml
'credits: https://plantuml.com/class-diagram
